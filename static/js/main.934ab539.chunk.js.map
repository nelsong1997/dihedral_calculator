{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["compose","secondElement","firstElement","N","resultIndex","secondElementType","toLowerCase","secondElementIndex","Number","slice","length","firstElementType","firstElementIndex","stringGroup","n","theRotations","theSymmetries","i","push","concat","findInverse","element","theInverse","elementType","elementIndex","App","state","compInput","conjClInput","NChange","bind","compInputChange","conjClInputChange","evnt","this","setState","target","value","stringN","style","height","margin","toString","displayCompositionInput","theGroup","returnArray","currentElement","j","dihedralGroup","pointsArray","lineArray","angle","Math","round","cos","sin","points","fill","stroke","strokeWidth","strokeDasharray","PI","elementArray","theLine","listItems","elementNumber","topLine","bottomLine","Array","textElementArray","point","x","y","fontFamily","fontSize","key","className","join","src","alt","width","id","displayCayleyTable","displayConjugacyClass","LHS","RHSElementType","RHSElementNumber","compInputArray","split","checkPassed","k","toUpperCase","reverseCompInput","reverse","previousElement","type","placeholder","onChange","theStringGroup","theRows","leftElement","theColumns","result","resultType","maximumLength","theElement","RHS","stringGroupInverses","RHSStringSet","RHSSet","checkElementValidity","newElement","console","log","newElementType","newElementIndex","includes","maxLength","displayWelcomeMessage","display","displayTheGroup","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.934ab539.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            N: \"\",\r\n            compInput: \"\",\r\n            conjClInput: \"\"\r\n        }\r\n        this.NChange = this.NChange.bind(this);\r\n        this.compInputChange = this.compInputChange.bind(this);\r\n        this.conjClInputChange = this.conjClInputChange.bind(this);\r\n\r\n    }\r\n    \r\n    NChange(evnt) {\r\n        this.setState( {N: evnt.target.value} )\r\n    }\r\n\r\n    compInputChange(evnt) {\r\n        this.setState( {compInput: evnt.target.value} )\r\n    }\r\n\r\n    conjClInputChange(evnt) {\r\n        this.setState( {conjClInput: evnt.target.value} )\r\n    }\r\n\r\n    displayWelcomeMessage(stringN) {\r\n        if (stringN===\"\") {\r\n            return (\r\n                <p>Welcome! Please select a dihedral group.</p>\r\n            )\r\n        } else {\r\n            return <div style={{height: \"18px\", margin: \"16px\"}}></div>\r\n        }\r\n    }\r\n\r\n    displayTheGroup(stringN) {\r\n        let N = Number(stringN)\r\n        if (N%1!==0 || (N<3 && stringN!==\"\") || N.toString()===\"NaN\") {\r\n            return (\r\n                <p>Error: Please enter an integer greater than or equal to 3 for <em>n</em>.</p>\r\n            )\r\n        } else if (N>20) {\r\n            return (\r\n                <div>\r\n                    {this.displayCompositionInput(this.state.N, this.state.compInput)}\r\n                    <p>The elements of the group are not listed for <em>n</em> larger than 20. :(</p>\r\n                </div>\r\n            )\r\n        } else if (stringN===\"\") {\r\n            return null\r\n        } else {\r\n            let theGroup = dihedralGroup(N)\r\n\r\n            let pointsArray = []\r\n            let lineArray = []\r\n            let angle = 0\r\n            for (let i = 0; i < N; i++) {                      \r\n                pointsArray.push(Math.round((50*Math.cos(angle) + 70)) + \",\" + Math.round((-50*Math.sin(angle) + 70)))  //creates an array of points that form the polygon\r\n                lineArray.push(                                                                                         //creates symmetry lines for the symmetries\r\n                    <polyline\r\n                    points={Math.round((55*Math.cos(angle/2) + 70)) + \",\" + Math.round((-55*Math.sin(angle/2) + 70)) + \" \" +\r\n                    Math.round((-55*Math.cos(angle/2) + 70)) + \",\" + Math.round((55*Math.sin(angle/2) + 70))}\r\n                        fill=\"none\" stroke=\"rgb(190, 190, 190)\" strokeWidth=\"2px\" strokeDasharray=\"4\"\r\n                    />\r\n                )\r\n                angle = angle + (2*Math.PI)/N\r\n            }\r\n\r\n            function symmetryLine(theLine, type) {\r\n                if (type===\"R\") {\r\n                    return null\r\n                } else {\r\n                    return theLine\r\n                }\r\n            }\r\n            function theElements(elementArray, n) {\r\n                if (n<=12) {\r\n                    return (\r\n                        <div id=\"the-elements\">\r\n                            <div id=\"rotations\">\r\n                                {elementArray.slice(0, N)}\r\n                            </div>\r\n                            <div id=\"symmetries\">\r\n                                {elementArray.slice(N, 2*N)}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                } else if (n>12) {\r\n                    return (\r\n                        <div id=\"the-elements\">\r\n                            <div id=\"all-elements\">\r\n                                {elementArray}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n\r\n            let listItems = []\r\n            let i = 0;\r\n            for (let element of theGroup) {\r\n                let elementType;\r\n                let elementNumber;\r\n                if ((element[1]-element[0] + N)%N === 1) {\r\n                    elementType = \"R\"\r\n                    elementNumber = (N - element[0])%N\r\n                } else {\r\n                    elementType = \"S\"\r\n                    elementNumber = element[0]\r\n                }\r\n                let topLine = []; let bottomLine = Array(element.length)\r\n                for (let i = 0; i < element.length; i++) {\r\n                    topLine.push(i)\r\n                    bottomLine[element[i]] = i\r\n                }\r\n                let textElementArray = []\r\n                angle = 0\r\n                let j = 0\r\n                for (let point of element) {\r\n                    textElementArray.push( //creates an array of text elements which are the labels for the points of the polygon\r\n                        <text\r\n                            x={Math.round(60*Math.cos(angle) + 66)} y={Math.round(-60*Math.sin(angle) + 76)}\r\n                            fontFamily=\"Times New Roman\" fontSize=\"16px\" fill=\"black\" key={j}>{point}\r\n                        </text>\r\n                    )\r\n                    angle = angle + (2*Math.PI)/N\r\n                    j++\r\n                }\r\n                listItems.push(\r\n                    <div className=\"element\" key={i}>\r\n                        <div>\r\n                            <em>{elementType}</em><sub>{elementNumber}</sub>: [{element.join(\", \")}]\r\n                        </div>\r\n                        <img\r\n                            className=\"permutation\" src={'http://latex.codecogs.com/svg.latex?\\\\left(\\\\begin{matrix}' +\r\n                            topLine.join(\"&\") + '\\\\\\\\' + bottomLine.join(\"&\") + '\\\\end{matrix}\\\\right)'} alt=\"permutation\"\r\n                        />\r\n                        <svg className=\"shape\" height=\"140\" width=\"140\">\r\n                            <polygon points={pointsArray.join(\" \")} style={{fill: \"none\", stroke: \"black\", strokeWidth: \"1\"}} />\r\n                            {symmetryLine(lineArray[i-N], elementType)}\r\n                            <polygon points=\"0,0 140,0 140,140 0,140\" style={{fill: \"none\", stroke: \"black\", strokeWidth: \"1\"}} />\r\n                            {textElementArray}\r\n                        </svg>\r\n                    </div>\r\n                )\r\n                i++\r\n            }\r\n            return (\r\n                <div>\r\n                    {this.displayCompositionInput(this.state.N, this.state.compInput)}\r\n                    <p>List of elements in the group:</p>\r\n                    {theElements(listItems, N)}\r\n                    {this.displayCayleyTable(N)}\r\n                    {this.displayConjugacyClass(N)}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    displayCompositionInput(stringN, compInput) {\r\n        let N = Number(stringN)\r\n        let LHS = \"...\"\r\n        let RHSElementType = \"...\"\r\n        let RHSElementNumber = null\r\n        let compInputArray = compInput.split(\"*\")\r\n\r\n        let checkPassed = true;\r\n        for (let element of compInputArray) {\r\n            if (\r\n                element.length < 2 ||\r\n                !(element[0].toLowerCase()===\"r\" || element[0].toLowerCase()===\"s\") ||\r\n                !(typeof(Number(element.slice(1, element.length)))===\"number\") ||\r\n                Number(element.slice(1, element.length)) >= N\r\n            ) {\r\n                checkPassed = false;\r\n                break\r\n            }\r\n        }\r\n        if (checkPassed) {\r\n            LHS = []              //-----------LHS\r\n            let k = 0\r\n            for (let element of compInputArray) {\r\n                LHS.push(\r\n                    <label key={k}><em>{element[0].toUpperCase()}</em><sub>{element.slice(1, element.length)}</sub></label>\r\n                )\r\n                LHS.push(\r\n                    <label key = {k + 1}>○</label>\r\n                )\r\n                k = k + 2\r\n            }\r\n            LHS = LHS.slice(0,-1) //don't include the final o\r\n\r\n            //-------------RHS\r\n\r\n            let reverseCompInput = compInputArray.reverse()\r\n            let previousElement = \"r0\"\r\n\r\n            for (let element of reverseCompInput) {\r\n                let newElement = compose(element, previousElement, N)\r\n                previousElement = newElement;\r\n            }\r\n\r\n            RHSElementType = previousElement[0].toUpperCase()\r\n            RHSElementNumber = previousElement.slice(1, previousElement.length)\r\n        }\r\n        return(\r\n            <div>\r\n                <p>Input some composition of elements!</p>\r\n                <input type=\"text\" placeholder=\"e.g. s1*r1*s2\" onChange={this.compInputChange}/>\r\n                <p>{LHS} = <em>{RHSElementType}</em><sub>{RHSElementNumber}</sub> </p>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    displayCayleyTable(n) {\r\n        let theStringGroup = stringGroup(n)\r\n        let theRows = []\r\n        for (let i = 0; i < 2*n+1; i++) {\r\n            let leftElement;\r\n            if (i===0) {\r\n                leftElement = \"R0\"\r\n            } else {\r\n                leftElement = theStringGroup[i-1]\r\n            }\r\n            let theColumns = []\r\n            for (let j = 0; j < 2*n+1; j++) {\r\n                let result;\r\n                if (i===0 && j===0) {\r\n                    result = \"○ \"\r\n                } else if (j===0) {\r\n                    result = compose(leftElement, \"R0\", n)\r\n                } else {\r\n                    result = compose(leftElement, theStringGroup[j-1], n)\r\n                }\r\n                let resultType = result[0].toUpperCase()\r\n                let resultIndex = result.slice(1, result.length)\r\n                if (i===0 || j===0) {\r\n                    theColumns.push(\r\n                        <th key={j}>\r\n                            <em>{resultType}</em><sub>{resultIndex}</sub>\r\n                        </th>\r\n                    )\r\n                } else {\r\n                    theColumns.push(\r\n                        <td key={j}>\r\n                            <em>{resultType}</em><sub>{resultIndex}</sub>\r\n                        </td>\r\n                    )\r\n                }\r\n            }\r\n            theRows.push(\r\n                <tr key={i}>\r\n                    {theColumns}\r\n                </tr>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <p>Here is a nice Cayley Table for <em>D</em><sub>{n}</sub>:</p>\r\n                <table>\r\n                    <tbody>\r\n                        {theRows}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    displayConjugacyClass(n) {\r\n        let maximumLength = (n-1).toString().length + 1\r\n        let theElement = this.state.conjClInput\r\n        let LHS = \"...\"\r\n        let RHS = \"...\"\r\n        let theStringGroup = stringGroup(n)\r\n        let stringGroupInverses = []\r\n        let RHSStringSet = []\r\n        let RHSSet = []\r\n        for (let i = 0; i < theStringGroup.length; i++) {\r\n            stringGroupInverses.push(findInverse(theStringGroup[i], n))\r\n        }\r\n        if (checkElementValidity(theElement, n)) {\r\n            for (let i = 0; i < theStringGroup.length; i++) {\r\n                let j = 2*i\r\n                let newElement = compose(theStringGroup[i], compose(theElement, stringGroupInverses[i], n), n)\r\n                console.log(newElement)\r\n                let newElementType = newElement[0].toUpperCase()\r\n                let newElementIndex = newElement.slice(1, newElement.length)\r\n                if (!(RHSStringSet.includes(newElement))) {\r\n                    RHSStringSet.push(newElement)\r\n                    RHSSet.push(\r\n                        <label key={j}>\r\n                            <em>{newElementType}</em><sub>{newElementIndex}</sub>\r\n                        </label>\r\n                    )\r\n                    RHSSet.push(<label key={j+1}>, </label>)\r\n                }\r\n                LHS = []\r\n                LHS.push(\r\n                    <label key={i}>\r\n                        <em>{theElement[0].toUpperCase()}</em><sub>{theElement.slice(1, theElement.length)}</sub>\r\n                    </label>\r\n                );\r\n                RHS = RHSSet.slice(0, -1)\r\n            }\r\n        }\r\n        return (\r\n            <div>\r\n                <p>Input an element to find its conjugacy class!</p>\r\n                <label>\r\n                    <input type=\"text\" placeholder=\"e.g. s2\" maxLength={maximumLength} onChange={this.conjClInputChange}/>\r\n                </label>\r\n                <p>cl({LHS}) = {\"{\"}{RHS}{\"}\"}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.displayWelcomeMessage(this.state.N)}\r\n                <label>\r\n                    <i>D<sub>n</sub> , n = </i> <input id=\"input-n\" type=\"number\" style={{display: \"inline\", width: \"50px\"}} onChange={this.NChange}/>\r\n                </label>\r\n                {this.displayTheGroup(this.state.N)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//----------------helper functions------------------//\r\n\r\nfunction dihedralGroup(N) {\r\n    if (N<3) return []\r\n    let returnArray = []\r\n\r\n    for (let i = 0; i < N; i++) {               //rotations\r\n        let currentElement = []                 //each value of i gives an element\r\n        for (let j = 0; j < N; j++) {           //each value of j adds a point to the element\r\n            currentElement.push(((N-i)+j)%N)    //every point in a rotation is 1 greater than the previous point mod N\r\n        }\r\n        returnArray.push(currentElement)\r\n    }\r\n\r\n    for (let i = 0; i < N; i++) {                   //symmetries\r\n        let currentElement = []                     //each value of i gives an element\r\n        for (let j = 0; j < N; j++) {               //each value of j adds a point to the element\r\n            currentElement.push(((2*N+i)-j)%N)      //every point in a symmetry is 1 less than the previous point mod N\r\n        }\r\n        returnArray.push(currentElement)\r\n    }\r\n    return returnArray\r\n}\r\n\r\nfunction compose(secondElement, firstElement, N) { // r1*r2 ... r1 is the second element since the operation happens second\r\n    let secondElementType = secondElement[0].toLowerCase()\r\n    let secondElementIndex = Number(secondElement.slice(1, secondElement.length))\r\n    let firstElementType = firstElement[0].toLowerCase()\r\n    let firstElementIndex = Number(firstElement.slice(1, firstElement.length))\r\n\r\n    let resultType;\r\n    let resultIndex;\r\n\r\n    if (secondElementType===firstElementType) {\r\n        resultType = \"r\"\r\n    } else {\r\n        resultType = \"s\"\r\n    }\r\n\r\n    if (secondElementType===\"r\") {\r\n        resultIndex = (firstElementIndex + secondElementIndex)%N\r\n    } else if (secondElementType===\"s\") {\r\n        resultIndex = (secondElementIndex - firstElementIndex + N)%N\r\n    }\r\n\r\n    return resultType + resultIndex\r\n}\r\n\r\nfunction checkElementValidity(element, n) {\r\n    if (typeof(element)!==\"string\" || element.length < 2 || element.length > ((n-1).toString().length + 1)) return false\r\n    let elementType = element[0].toLowerCase()\r\n    let elementIndex = Number(element.slice(1, element.length))\r\n    if (!(elementType===\"r\" || elementType===\"s\") || elementIndex > n - 1) return false\r\n    return true\r\n}\r\n\r\nfunction stringGroup(n) {\r\n    let theRotations = []\r\n    let theSymmetries = []\r\n    for (let i = 0; i < n; i++) {\r\n        theRotations.push(\"R\" + i)\r\n        theSymmetries.push(\"S\" + i)\r\n    }\r\n    return theRotations.concat(theSymmetries)\r\n}\r\n\r\nfunction findInverse(element, n) {\r\n    let elementType = element[0].toLowerCase()\r\n    let elementIndex = Number(element.slice(1, element.length))\r\n    let theInverse;\r\n    if (elementType===\"r\") {\r\n        theInverse = \"R\" + (2*n - elementIndex)%n\r\n    } else if (elementType===\"s\") {\r\n        theInverse = \"S\" + elementIndex\r\n    }\r\n    return theInverse\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}